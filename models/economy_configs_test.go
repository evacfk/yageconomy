// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEconomyConfigs(t *testing.T) {
	t.Parallel()

	query := EconomyConfigs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEconomyConfigsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EconomyConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEconomyConfigsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := EconomyConfigs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EconomyConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEconomyConfigsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EconomyConfigSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EconomyConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEconomyConfigsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EconomyConfigExists(ctx, tx, o.GuildID)
	if err != nil {
		t.Errorf("Unable to check if EconomyConfig exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EconomyConfigExists to return true, but got false.")
	}
}

func testEconomyConfigsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	economyConfigFound, err := FindEconomyConfig(ctx, tx, o.GuildID)
	if err != nil {
		t.Error(err)
	}

	if economyConfigFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEconomyConfigsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = EconomyConfigs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEconomyConfigsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := EconomyConfigs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEconomyConfigsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	economyConfigOne := &EconomyConfig{}
	economyConfigTwo := &EconomyConfig{}
	if err = randomize.Struct(seed, economyConfigOne, economyConfigDBTypes, false, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, economyConfigTwo, economyConfigDBTypes, false, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = economyConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = economyConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EconomyConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEconomyConfigsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	economyConfigOne := &EconomyConfig{}
	economyConfigTwo := &EconomyConfig{}
	if err = randomize.Struct(seed, economyConfigOne, economyConfigDBTypes, false, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, economyConfigTwo, economyConfigDBTypes, false, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = economyConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = economyConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EconomyConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testEconomyConfigsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EconomyConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEconomyConfigsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(economyConfigColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := EconomyConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEconomyConfigsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEconomyConfigsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EconomyConfigSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEconomyConfigsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EconomyConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	economyConfigDBTypes = map[string]string{`GuildID`: `bigint`, `Enabled`: `boolean`, `Admins`: `ARRAYbigint`, `CurrencyName`: `text`, `CurrencyNamePlural`: `text`, `CurrencySymbol`: `text`, `DailyFrequency`: `bigint`, `DailyAmount`: `bigint`, `ChatmoneyFrequency`: `bigint`, `ChatmoneyAmountMin`: `bigint`, `ChatmoneyAmountMax`: `bigint`, `AutoPlantChannels`: `ARRAYbigint`, `AutoPlantMin`: `bigint`, `AutoPlantMax`: `bigint`, `AutoPlantChance`: `numeric`, `StartBalance`: `bigint`, `FishingMaxWinAmount`: `bigint`, `FishingMinWinAmount`: `bigint`, `FishingCooldown`: `integer`, `RobFine`: `integer`, `RobCooldown`: `integer`, `HeistServerCooldown`: `integer`, `HeistFailedGamblingBanDuration`: `integer`, `HeistLastUsage`: `timestamp with time zone`, `HeistFixedPayout`: `integer`, `EnabledChannels`: `ARRAYbigint`}
	_                    = bytes.MinRead
)

func testEconomyConfigsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(economyConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(economyConfigAllColumns) == len(economyConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EconomyConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEconomyConfigsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(economyConfigAllColumns) == len(economyConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EconomyConfig{}
	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EconomyConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, economyConfigDBTypes, true, economyConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(economyConfigAllColumns, economyConfigPrimaryKeyColumns) {
		fields = economyConfigAllColumns
	} else {
		fields = strmangle.SetComplement(
			economyConfigAllColumns,
			economyConfigPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EconomyConfigSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEconomyConfigsUpsert(t *testing.T) {
	t.Parallel()

	if len(economyConfigAllColumns) == len(economyConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := EconomyConfig{}
	if err = randomize.Struct(seed, &o, economyConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EconomyConfig: %s", err)
	}

	count, err := EconomyConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, economyConfigDBTypes, false, economyConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EconomyConfig struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EconomyConfig: %s", err)
	}

	count, err = EconomyConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
